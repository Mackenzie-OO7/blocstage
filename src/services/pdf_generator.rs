use anyhow::Result;
use chrono::{DateTime, Utc};
use printpdf::*;
use qrcode::{QrCode, render::png};
use serde_json::json;
use crate::models::{event::Event, ticket::Ticket, ticket_type::TicketType, user::User};
use std::io::Cursor;

pub struct PdfGenerator;

impl PdfGenerator {
    pub fn new() -> Self {
        Self
    }

    pub fn generate_ticket_pdf(
        &self,
        ticket: &Ticket,
        ticket_type: &TicketType,
        event: &Event,
        user: &User,
    ) -> Result<Vec<u8>> {
        let app_url = std::env::var("APP_URL").unwrap_or_else(|_| "https://blocstage.com".to_string());
        let qr_code_data = format!("{}/check-in/{}", app_url, ticket.id);

        let qr_code = QrCode::new(&qr_code_data)?;
        let qr_image = qr_code
            .render::<image::Luma<u8>>()
            .min_dimensions(150, 150)
            .build();

        let (doc, page1, layer1) = PdfDocument::new("Ticket", Mm(210.0), Mm(297.0), "Layer 1");
        let current_layer = doc.get_page(page1).get_layer(layer1);

        let font = doc.add_builtin_font(BuiltinFont::Helvetica)?;
        let font_bold = doc.add_builtin_font(BuiltinFont::HelveticaBold)?;

        current_layer.use_text(&event.title, 24.0, Mm(20.0), Mm(260.0), &font_bold);
        
        let event_date = event.start_time.format("%B %d, %Y at %I:%M %p UTC").to_string();
        current_layer.use_text(&format!("Date: {}", event_date), 12.0, Mm(20.0), Mm(240.0), &font);
        
        current_layer.use_text(&format!("Ticket Type: {}", ticket_type.name), 12.0, Mm(20.0), Mm(220.0), &font);
        current_layer.use_text(&format!("Ticket ID: {}", ticket.id), 10.0, Mm(20.0), Mm(200.0), &font);
        current_layer.use_text(&format!("Owner: {}", user.username), 12.0, Mm(20.0), Mm(180.0), &font);

        if let Some(price) = &ticket_type.price {
            if !ticket_type.is_free {
                let currency = ticket_type.currency.as_deref().unwrap_or("USD");
                current_layer.use_text(&format!("Price: {} {}", price, currency), 12.0, Mm(20.0), Mm(160.0), &font);
            } else {
                current_layer.use_text("Price: FREE", 12.0, Mm(20.0), Mm(160.0), &font);
            }
        } else {
            current_layer.use_text("Price: FREE", 12.0, Mm(20.0), Mm(160.0), &font);
        }

        let purchase_date = ticket.created_at.format("%B %d, %Y at %I:%M %p UTC").to_string();
        current_layer.use_text(&format!("Purchased: {}", purchase_date), 10.0, Mm(20.0), Mm(140.0), &font);

        current_layer.use_text("QR Code for Check-in:", 14.0, Mm(20.0), Mm(110.0), &font_bold);

        let mut qr_bytes = Vec::new();
        let mut cursor = Cursor::new(&mut qr_bytes);
        qr_image.write_to(&mut cursor, image::ImageFormat::Png)?;

        if let Ok(qr_image_obj) = Image::from_dynamic_image(&image::load_from_memory(&qr_bytes)?) {
            qr_image_obj.add_to_layer(current_layer.clone(), ImageTransform::default().translate(Mm(20.0), Mm(50.0)).scale(Mm(50.0), Mm(50.0)));
        }

        current_layer.use_text("Present this QR code at the event entrance for check-in.", 10.0, Mm(20.0), Mm(40.0), &font);

        current_layer.use_text("This ticket is valid for one-time entry only.", 8.0, Mm(20.0), Mm(20.0), &font);
        current_layer.use_text("Generated by BlocStage", 8.0, Mm(20.0), Mm(10.0), &font);

        let mut pdf_bytes = Vec::new();
        doc.save(&mut Cursor::new(&mut pdf_bytes))?;

        Ok(pdf_bytes)
    }
}